package com.book.cyc2018.javaIO.nio;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Iterator;

/**
 * @Description nio-server
 * @CreateDate 18/07/31 10:37
 * @Author zohn
 * @Version 1.0
 */
public class NIOServer {
    // 通道管理器
    private Selector selector;

    /**
     * 获取一个ServerSocket通道，并对该通道做一些初始化工作
     *
     * @param port 绑定的端口号
     * @throws IOException
     */
    public void initServer(int port) throws IOException {
        // 获取一个ServerSocket通道
        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
        // 设置通道为非阻塞
        serverSocketChannel.configureBlocking(false);
        // 将改通道对应的ServerSocket绑定到port端口
        serverSocketChannel.socket().bind(new InetSocketAddress(port));
        // 获取一个通道管理器
        this.selector = Selector.open();
        // 将通道管理器和通道绑定，并且为改通道注册SelectionKey.OP_ACCEPT，注册该事件后
        // 当该事件到达时，selector.select()会返回，如果事件没到达selector.select()会一直阻塞
        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);

    }

    /**
     * 采用轮询的方式监听selector上是否有需要处理的事件，如果有，则进行处理
     *
     * @throws IOException
     */
    public void listen() throws IOException {
        System.out.println("服务器端启动成功");
        // 轮询访问selector
        while (true) {
            // 当注册的时间到达时，方法返回；否则该方法会一直阻塞。
            selector.select();
            // 获得selector中选中的项的迭代器 选中的项为注册的事件
            Iterator<SelectionKey> keyIterator = this.selector.selectedKeys().iterator();
            while (keyIterator.hasNext()){
                SelectionKey key = keyIterator.next();
                // 删除已选的key，防止重复处理
                keyIterator.remove();
                // 客户端请求连接事件
                if (key.isAcceptable()){
                    ServerSocketChannel server = (ServerSocketChannel) key.channel();
                    // 获得和客户端连接的通道
                    SocketChannel channel = server.accept();
                    // 设置为非阻塞
                    channel.configureBlocking(false);
                    // 给客户端发送消息
                    channel.write(ByteBuffer.wrap(new String("向客户端发送一条消息").getBytes()));
                    // 在和客户端连接成功之后，为了可以接收到客户端的信息，需要给通道设置读的权限。
                    channel.register(this.selector, SelectionKey.OP_READ);
                } else if (key.isReadable()) {
                        read(key);
                }
            }
        }
    }

    /**
     * 读取客户端发送消息的方法
     * @param key
     * @throws IOException
     */
    public void read (SelectionKey key) throws IOException{
        // 服务器可读取消息：得到事件发生的Socket通道
        SocketChannel channel = (SocketChannel)key.channel();
        // 创建读取的缓冲区
        ByteBuffer buffer = ByteBuffer.allocate(10);
        channel.read(buffer);
        byte[] data = buffer.array();
        String msg = new String(data).trim();
        System.out.println("服务器端收到的信息：" + msg);
        ByteBuffer outBuffer = ByteBuffer.wrap(msg.getBytes());
        // 消息返回客户端
        channel.write(outBuffer);
    }

    /**
     * 启动服务端
     * @param args
     */
    public static void main(String[] args) throws IOException{
        NIOServer server = new NIOServer();
        server.initServer(8088);
        server.listen();
    }
}
